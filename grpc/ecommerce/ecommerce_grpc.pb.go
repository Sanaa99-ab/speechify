// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: ecommerce/ecommerce.proto

package ecommerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroceryClient is the client API for Grocery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroceryClient interface {
	GetGrocery(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Item, error)
	ListGrocery(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ItemList, error)
	BuyGrocery(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
}

type groceryClient struct {
	cc grpc.ClientConnInterface
}

func NewGroceryClient(cc grpc.ClientConnInterface) GroceryClient {
	return &groceryClient{cc}
}

func (c *groceryClient) GetGrocery(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/ecommerce.grocery/GetGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryClient) ListGrocery(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/ecommerce.grocery/ListGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groceryClient) BuyGrocery(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/ecommerce.grocery/BuyGrocery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroceryServer is the server API for Grocery service.
// All implementations must embed UnimplementedGroceryServer
// for forward compatibility
type GroceryServer interface {
	GetGrocery(context.Context, *Category) (*Item, error)
	ListGrocery(context.Context, *Category) (*ItemList, error)
	BuyGrocery(context.Context, *PaymentRequest) (*PaymentResponse, error)
	mustEmbedUnimplementedGroceryServer()
}

// UnimplementedGroceryServer must be embedded to have forward compatible implementations.
type UnimplementedGroceryServer struct {
}

func (UnimplementedGroceryServer) GetGrocery(context.Context, *Category) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrocery not implemented")
}
func (UnimplementedGroceryServer) ListGrocery(context.Context, *Category) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrocery not implemented")
}
func (UnimplementedGroceryServer) BuyGrocery(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyGrocery not implemented")
}
func (UnimplementedGroceryServer) mustEmbedUnimplementedGroceryServer() {}

// UnsafeGroceryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroceryServer will
// result in compilation errors.
type UnsafeGroceryServer interface {
	mustEmbedUnimplementedGroceryServer()
}

func RegisterGroceryServer(s grpc.ServiceRegistrar, srv GroceryServer) {
	s.RegisterService(&Grocery_ServiceDesc, srv)
}

func _Grocery_GetGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServer).GetGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.grocery/GetGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServer).GetGrocery(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grocery_ListGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServer).ListGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.grocery/ListGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServer).ListGrocery(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grocery_BuyGrocery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroceryServer).BuyGrocery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.grocery/BuyGrocery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroceryServer).BuyGrocery(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grocery_ServiceDesc is the grpc.ServiceDesc for Grocery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grocery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.grocery",
	HandlerType: (*GroceryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGrocery",
			Handler:    _Grocery_GetGrocery_Handler,
		},
		{
			MethodName: "ListGrocery",
			Handler:    _Grocery_ListGrocery_Handler,
		},
		{
			MethodName: "BuyGrocery",
			Handler:    _Grocery_BuyGrocery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecommerce/ecommerce.proto",
}
